q
str
c
str
c
str
c
str
q
str.encode(Encoding.find('UTF-8'), {invalid: :replace, undef: :replace, replace: ''})
$xx
str = str.force_encoding("UTF-8")
CGI::unescape str
CGI::escape str
str
CGI::unescape str
quit
b = str.encode("UTF-8", "GBK")
str.valid_encoding?
$xx.encoding.name
$xx.encode.name
$xx
str
q
puts "\xE4"
puts \xE4
puts "\xE4\xB8"
str.force_encoding('utf-8').encode("UTF-8")
str.encode("UTF-8",:undef => :replace)
str.encode("UTF-8")
str
exit
content
n
content
n
content = io.gets(Pigeon::MAXREAD)
content
c
content = io.gets(Pigeon::MAXREAD)
content
c
content
c
content
c
content = content.encode("utf-8", "binary", :undef => :replace)
content.force_encoding('utf-8')
content
content = io.gets(Pigeon::MAXREAD)
content
c
content
c
content
c
content
c
content
c
content
c
content
c
n
content
n
content
n
content
n
content
n
content
n
content
c
quit
str
exit
content.force_encoding('utf-8')
puts content
content
c
content
c
puts content
c
pute content
c
puts content
q
c
item
n
s
content
n
c
content
n
q
io.eof?
c
item
n
content
puts content
puts conent
n
q
quit
content.encoding='utf-8'
content.encoding.name
content
ARGF.external_encoding
ARGF.binmode?
content.encoding.name
content
content = io.read_bytes Pigeon::MAXREAD
content = io.readbyte Pigeon::MAXREAD
content = io.readbytes Pigeon::MAXREAD
puts content
n
exit
str
c
quit
str.force_encoding('utf-8') 
Iconv.conv('utf-8', 'gbk', str)
require 'iconv' 
Iconv.conv('utf-8', 'gbk', str)
Iconv.conv('utf-8', 'gbk', gbk_text)
str.encode("UTF-8")
str
puts chars
n
puts chars
n
puts str
str
s
item, idx_p = self.scan(idx, content, data)
c
q
c
puts content
c
puts content
c
puts content
c
item, idx_p = self.scan(idx, content, data)
puts content
content
